{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4565d65c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:33.127782Z",
     "iopub.status.busy": "2024-07-19T18:33:33.127351Z",
     "iopub.status.idle": "2024-07-19T18:33:34.139027Z",
     "shell.execute_reply": "2024-07-19T18:33:34.137426Z"
    },
    "papermill": {
     "duration": 1.020175,
     "end_time": "2024-07-19T18:33:34.141608",
     "exception": false,
     "start_time": "2024-07-19T18:33:33.121433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/electric-vehicle-population-dataset/Electric_Vehicle_Population_Data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9980b522",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:34.151869Z",
     "iopub.status.busy": "2024-07-19T18:33:34.150465Z",
     "iopub.status.idle": "2024-07-19T18:33:35.570609Z",
     "shell.execute_reply": "2024-07-19T18:33:35.569703Z"
    },
    "papermill": {
     "duration": 1.42779,
     "end_time": "2024-07-19T18:33:35.573363",
     "exception": false,
     "start_time": "2024-07-19T18:33:34.145573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patheffects import withStroke"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "173121c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:35.582348Z",
     "iopub.status.busy": "2024-07-19T18:33:35.581969Z",
     "iopub.status.idle": "2024-07-19T18:33:36.798980Z",
     "shell.execute_reply": "2024-07-19T18:33:36.797507Z"
    },
    "papermill": {
     "duration": 1.224728,
     "end_time": "2024-07-19T18:33:36.801805",
     "exception": false,
     "start_time": "2024-07-19T18:33:35.577077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/electric-vehicle-population-dataset/Electric_Vehicle_Population_Data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "beec1d3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:36.810929Z",
     "iopub.status.busy": "2024-07-19T18:33:36.810483Z",
     "iopub.status.idle": "2024-07-19T18:33:36.842601Z",
     "shell.execute_reply": "2024-07-19T18:33:36.841493Z"
    },
    "papermill": {
     "duration": 0.039848,
     "end_time": "2024-07-19T18:33:36.845375",
     "exception": false,
     "start_time": "2024-07-19T18:33:36.805527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN (1-10)</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Postal Code</th>\n",
       "      <th>Model Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Electric Vehicle Type</th>\n",
       "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
       "      <th>Electric Range</th>\n",
       "      <th>Base MSRP</th>\n",
       "      <th>Legislative District</th>\n",
       "      <th>DOL Vehicle ID</th>\n",
       "      <th>Vehicle Location</th>\n",
       "      <th>Electric Utility</th>\n",
       "      <th>2020 Census Tract</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5YJSA1E22K</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98112.0</td>\n",
       "      <td>2019</td>\n",
       "      <td>TESLA</td>\n",
       "      <td>MODEL S</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>270</td>\n",
       "      <td>0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>202233958</td>\n",
       "      <td>POINT (-122.300312 47.629782)</td>\n",
       "      <td>CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)</td>\n",
       "      <td>5.303301e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3MW39FS05R</td>\n",
       "      <td>Yakima</td>\n",
       "      <td>Zillah</td>\n",
       "      <td>WA</td>\n",
       "      <td>98953.0</td>\n",
       "      <td>2024</td>\n",
       "      <td>BMW</td>\n",
       "      <td>330E</td>\n",
       "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>264425178</td>\n",
       "      <td>POINT (-120.2658133 46.4063477)</td>\n",
       "      <td>PACIFICORP</td>\n",
       "      <td>5.307700e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1N4AZ0CP0F</td>\n",
       "      <td>King</td>\n",
       "      <td>Kent</td>\n",
       "      <td>WA</td>\n",
       "      <td>98031.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NISSAN</td>\n",
       "      <td>LEAF</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>114962025</td>\n",
       "      <td>POINT (-122.201564 47.402358)</td>\n",
       "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
       "      <td>5.303303e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5YJSA1H20F</td>\n",
       "      <td>Snohomish</td>\n",
       "      <td>Bothell</td>\n",
       "      <td>WA</td>\n",
       "      <td>98012.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>TESLA</td>\n",
       "      <td>MODEL S</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>208</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>232724670</td>\n",
       "      <td>POINT (-122.206146 47.839957)</td>\n",
       "      <td>PUGET SOUND ENERGY INC</td>\n",
       "      <td>5.306105e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>JTMAB3FV1N</td>\n",
       "      <td>Yakima</td>\n",
       "      <td>Yakima</td>\n",
       "      <td>WA</td>\n",
       "      <td>98908.0</td>\n",
       "      <td>2022</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>RAV4 PRIME</td>\n",
       "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>221023589</td>\n",
       "      <td>POINT (-120.611068 46.596645)</td>\n",
       "      <td>PACIFICORP</td>\n",
       "      <td>5.307700e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VIN (1-10)     County     City State  Postal Code  Model Year    Make  \\\n",
       "0  5YJSA1E22K       King  Seattle    WA      98112.0        2019   TESLA   \n",
       "1  3MW39FS05R     Yakima   Zillah    WA      98953.0        2024     BMW   \n",
       "2  1N4AZ0CP0F       King     Kent    WA      98031.0        2015  NISSAN   \n",
       "3  5YJSA1H20F  Snohomish  Bothell    WA      98012.0        2015   TESLA   \n",
       "4  JTMAB3FV1N     Yakima   Yakima    WA      98908.0        2022  TOYOTA   \n",
       "\n",
       "        Model                   Electric Vehicle Type  \\\n",
       "0     MODEL S          Battery Electric Vehicle (BEV)   \n",
       "1        330E  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
       "2        LEAF          Battery Electric Vehicle (BEV)   \n",
       "3     MODEL S          Battery Electric Vehicle (BEV)   \n",
       "4  RAV4 PRIME  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
       "\n",
       "  Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
       "0           Clean Alternative Fuel Vehicle Eligible             270   \n",
       "1             Not eligible due to low battery range              20   \n",
       "2           Clean Alternative Fuel Vehicle Eligible              84   \n",
       "3           Clean Alternative Fuel Vehicle Eligible             208   \n",
       "4           Clean Alternative Fuel Vehicle Eligible              42   \n",
       "\n",
       "   Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
       "0          0                  43.0       202233958   \n",
       "1          0                  15.0       264425178   \n",
       "2          0                  11.0       114962025   \n",
       "3          0                   1.0       232724670   \n",
       "4          0                  14.0       221023589   \n",
       "\n",
       "                  Vehicle Location  \\\n",
       "0    POINT (-122.300312 47.629782)   \n",
       "1  POINT (-120.2658133 46.4063477)   \n",
       "2    POINT (-122.201564 47.402358)   \n",
       "3    POINT (-122.206146 47.839957)   \n",
       "4    POINT (-120.611068 46.596645)   \n",
       "\n",
       "                                Electric Utility  2020 Census Tract  \n",
       "0   CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)       5.303301e+10  \n",
       "1                                     PACIFICORP       5.307700e+10  \n",
       "2  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303303e+10  \n",
       "3                         PUGET SOUND ENERGY INC       5.306105e+10  \n",
       "4                                     PACIFICORP       5.307700e+10  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b47ce8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:36.855058Z",
     "iopub.status.busy": "2024-07-19T18:33:36.854709Z",
     "iopub.status.idle": "2024-07-19T18:33:36.971515Z",
     "shell.execute_reply": "2024-07-19T18:33:36.970149Z"
    },
    "papermill": {
     "duration": 0.124843,
     "end_time": "2024-07-19T18:33:36.974210",
     "exception": false,
     "start_time": "2024-07-19T18:33:36.849367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 191407 entries, 0 to 191406\n",
      "Data columns (total 17 columns):\n",
      " #   Column                                             Non-Null Count   Dtype  \n",
      "---  ------                                             --------------   -----  \n",
      " 0   VIN (1-10)                                         191407 non-null  object \n",
      " 1   County                                             191403 non-null  object \n",
      " 2   City                                               191403 non-null  object \n",
      " 3   State                                              191407 non-null  object \n",
      " 4   Postal Code                                        191403 non-null  float64\n",
      " 5   Model Year                                         191407 non-null  int64  \n",
      " 6   Make                                               191407 non-null  object \n",
      " 7   Model                                              191407 non-null  object \n",
      " 8   Electric Vehicle Type                              191407 non-null  object \n",
      " 9   Clean Alternative Fuel Vehicle (CAFV) Eligibility  191407 non-null  object \n",
      " 10  Electric Range                                     191407 non-null  int64  \n",
      " 11  Base MSRP                                          191407 non-null  int64  \n",
      " 12  Legislative District                               190993 non-null  float64\n",
      " 13  DOL Vehicle ID                                     191407 non-null  int64  \n",
      " 14  Vehicle Location                                   191399 non-null  object \n",
      " 15  Electric Utility                                   191403 non-null  object \n",
      " 16  2020 Census Tract                                  191403 non-null  float64\n",
      "dtypes: float64(3), int64(4), object(10)\n",
      "memory usage: 24.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6d149b22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:36.984745Z",
     "iopub.status.busy": "2024-07-19T18:33:36.983636Z",
     "iopub.status.idle": "2024-07-19T18:33:37.098818Z",
     "shell.execute_reply": "2024-07-19T18:33:37.097641Z"
    },
    "papermill": {
     "duration": 0.123157,
     "end_time": "2024-07-19T18:33:37.101464",
     "exception": false,
     "start_time": "2024-07-19T18:33:36.978307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.dropna(how='all')  #nao ha linhas totalmente com NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0acc33b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:37.111475Z",
     "iopub.status.busy": "2024-07-19T18:33:37.111067Z",
     "iopub.status.idle": "2024-07-19T18:33:37.216020Z",
     "shell.execute_reply": "2024-07-19T18:33:37.214348Z"
    },
    "papermill": {
     "duration": 0.113008,
     "end_time": "2024-07-19T18:33:37.218677",
     "exception": false,
     "start_time": "2024-07-19T18:33:37.105669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 191407 entries, 0 to 191406\n",
      "Data columns (total 17 columns):\n",
      " #   Column                                             Non-Null Count   Dtype  \n",
      "---  ------                                             --------------   -----  \n",
      " 0   VIN (1-10)                                         191407 non-null  object \n",
      " 1   County                                             191403 non-null  object \n",
      " 2   City                                               191403 non-null  object \n",
      " 3   State                                              191407 non-null  object \n",
      " 4   Postal Code                                        191403 non-null  float64\n",
      " 5   Model Year                                         191407 non-null  int64  \n",
      " 6   Make                                               191407 non-null  object \n",
      " 7   Model                                              191407 non-null  object \n",
      " 8   Electric Vehicle Type                              191407 non-null  object \n",
      " 9   Clean Alternative Fuel Vehicle (CAFV) Eligibility  191407 non-null  object \n",
      " 10  Electric Range                                     191407 non-null  int64  \n",
      " 11  Base MSRP                                          191407 non-null  int64  \n",
      " 12  Legislative District                               190993 non-null  float64\n",
      " 13  DOL Vehicle ID                                     191407 non-null  int64  \n",
      " 14  Vehicle Location                                   191399 non-null  object \n",
      " 15  Electric Utility                                   191403 non-null  object \n",
      " 16  2020 Census Tract                                  191403 non-null  float64\n",
      "dtypes: float64(3), int64(4), object(10)\n",
      "memory usage: 24.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3e72780d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:37.229057Z",
     "iopub.status.busy": "2024-07-19T18:33:37.228668Z",
     "iopub.status.idle": "2024-07-19T18:33:37.606174Z",
     "shell.execute_reply": "2024-07-19T18:33:37.603512Z"
    },
    "papermill": {
     "duration": 0.386245,
     "end_time": "2024-07-19T18:33:37.609214",
     "exception": false,
     "start_time": "2024-07-19T18:33:37.222969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VIN (1-10)  - valores unicos =  11487 \n",
      " VIN (1-10)\n",
      "7SAYGDEE6P    1236\n",
      "7SAYGDEE7P    1220\n",
      "7SAYGDEE8P    1187\n",
      "7SAYGDEE5P    1184\n",
      "7SAYGDEEXP    1175\n",
      "              ... \n",
      "KMHC75LD6K       1\n",
      "1G1RB6S5XK       1\n",
      "YV4BR00Z5N       1\n",
      "JN1DF0BB4R       1\n",
      "3MW5P7J05M       1\n",
      "Name: count, Length: 11487, dtype: int64 \n",
      "\n",
      "County  - valores unicos =  197 \n",
      " County\n",
      "King          99076\n",
      "Snohomish     22643\n",
      "Pierce        14932\n",
      "Clark         11335\n",
      "Thurston       6969\n",
      "              ...  \n",
      "New York          1\n",
      "Miami-Dade        1\n",
      "Mobile            1\n",
      "Beaufort          1\n",
      "Pitt              1\n",
      "Name: count, Length: 197, dtype: int64 \n",
      "\n",
      "City  - valores unicos =  744 \n",
      " City\n",
      "Seattle                    31436\n",
      "Bellevue                    9582\n",
      "Redmond                     6883\n",
      "Vancouver                   6744\n",
      "Bothell                     6278\n",
      "                           ...  \n",
      "Holloman Air Force Base        1\n",
      "Rosamond                       1\n",
      "Newbury Park                   1\n",
      "Saratoga Springs               1\n",
      "Fremont                        1\n",
      "Name: count, Length: 744, dtype: int64 \n",
      "\n",
      "State  - valores unicos =  46 \n",
      " State\n",
      "WA    190993\n",
      "CA       107\n",
      "VA        53\n",
      "MD        32\n",
      "TX        25\n",
      "CO        16\n",
      "NC        15\n",
      "IL        14\n",
      "AZ        13\n",
      "NV         9\n",
      "FL         9\n",
      "NY         8\n",
      "NJ         8\n",
      "HI         8\n",
      "OR         7\n",
      "CT         7\n",
      "AL         7\n",
      "SC         7\n",
      "UT         6\n",
      "GA         6\n",
      "MO         5\n",
      "ID         4\n",
      "OH         4\n",
      "LA         4\n",
      "DC         3\n",
      "IN         3\n",
      "PA         3\n",
      "KY         3\n",
      "KS         3\n",
      "MA         3\n",
      "BC         3\n",
      "AR         2\n",
      "MI         2\n",
      "RI         2\n",
      "NE         2\n",
      "AK         1\n",
      "MT         1\n",
      "OK         1\n",
      "DE         1\n",
      "IA         1\n",
      "NH         1\n",
      "NM         1\n",
      "MN         1\n",
      "WY         1\n",
      "AE         1\n",
      "WI         1\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Postal Code  - valores unicos =  892 \n",
      " Postal Code\n",
      "98052.0    4858\n",
      "98012.0    3585\n",
      "98188.0    3240\n",
      "98033.0    3228\n",
      "98006.0    3051\n",
      "           ... \n",
      "92106.0       1\n",
      "92585.0       1\n",
      "80104.0       1\n",
      "95903.0       1\n",
      "97215.0       1\n",
      "Name: count, Length: 892, dtype: int64 \n",
      "\n",
      "Model Year  - valores unicos =  23 \n",
      " Model Year\n",
      "2023    60084\n",
      "2022    28116\n",
      "2021    19531\n",
      "2024    16963\n",
      "2018    14340\n",
      "2020    12149\n",
      "2019    10933\n",
      "2017     8650\n",
      "2016     5528\n",
      "2015     4818\n",
      "2013     4363\n",
      "2014     3533\n",
      "2012     1595\n",
      "2011      736\n",
      "2010       24\n",
      "2008       21\n",
      "2000        7\n",
      "2025        6\n",
      "1999        5\n",
      "2002        2\n",
      "1998        1\n",
      "1997        1\n",
      "2003        1\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Make  - valores unicos =  42 \n",
      " Make\n",
      "TESLA                   84670\n",
      "CHEVROLET               14321\n",
      "NISSAN                  14239\n",
      "FORD                    10048\n",
      "KIA                      8671\n",
      "BMW                      7993\n",
      "TOYOTA                   7181\n",
      "VOLKSWAGEN               5408\n",
      "JEEP                     4996\n",
      "HYUNDAI                  4977\n",
      "RIVIAN                   4751\n",
      "VOLVO                    4469\n",
      "AUDI                     3890\n",
      "CHRYSLER                 3393\n",
      "MERCEDES-BENZ            1784\n",
      "PORSCHE                  1182\n",
      "MITSUBISHI                996\n",
      "MINI                      984\n",
      "SUBARU                    970\n",
      "POLESTAR                  939\n",
      "HONDA                     857\n",
      "FIAT                      781\n",
      "DODGE                     619\n",
      "MAZDA                     581\n",
      "LEXUS                     567\n",
      "CADILLAC                  552\n",
      "LINCOLN                   281\n",
      "LUCID                     263\n",
      "SMART                     259\n",
      "JAGUAR                    234\n",
      "GENESIS                   219\n",
      "FISKER                    181\n",
      "LAND ROVER                 60\n",
      "ALFA ROMEO                 56\n",
      "GMC                        11\n",
      "AZURE DYNAMICS              8\n",
      "TH!NK                       5\n",
      "WHEEGO ELECTRIC CARS        3\n",
      "BENTLEY                     3\n",
      "ROLLS ROYCE                 2\n",
      "RAM                         2\n",
      "ACURA                       1\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Model  - valores unicos =  147 \n",
      " Model\n",
      "MODEL Y        39521\n",
      "MODEL 3        30978\n",
      "LEAF           13439\n",
      "MODEL S         7869\n",
      "BOLT EV         6444\n",
      "               ...  \n",
      "ZDX                1\n",
      "918                1\n",
      "750E               1\n",
      "S-10 PICKUP        1\n",
      "BENTAYGA           1\n",
      "Name: count, Length: 147, dtype: int64 \n",
      "\n",
      "Electric Vehicle Type  - valores unicos =  2 \n",
      " Electric Vehicle Type\n",
      "Battery Electric Vehicle (BEV)            149687\n",
      "Plug-in Hybrid Electric Vehicle (PHEV)     41720\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Clean Alternative Fuel Vehicle (CAFV) Eligibility  - valores unicos =  3 \n",
      " Clean Alternative Fuel Vehicle (CAFV) Eligibility\n",
      "Eligibility unknown as battery range has not been researched    102133\n",
      "Clean Alternative Fuel Vehicle Eligible                          68785\n",
      "Not eligible due to low battery range                            20489\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Electric Range  - valores unicos =  103 \n",
      " Electric Range\n",
      "0      102133\n",
      "215      6415\n",
      "32       4476\n",
      "25       4290\n",
      "220      4047\n",
      "        ...  \n",
      "11          3\n",
      "95          3\n",
      "51          2\n",
      "46          2\n",
      "57          2\n",
      "Name: count, Length: 103, dtype: int64 \n",
      "\n",
      "Base MSRP  - valores unicos =  31 \n",
      " Base MSRP\n",
      "0         188069\n",
      "69900       1361\n",
      "31950        376\n",
      "52900        217\n",
      "32250        143\n",
      "59900        130\n",
      "54950        127\n",
      "39995        112\n",
      "36900        108\n",
      "44100         96\n",
      "64950         85\n",
      "45600         81\n",
      "34995         69\n",
      "52650         69\n",
      "33950         68\n",
      "36800         54\n",
      "55700         51\n",
      "53400         42\n",
      "81100         22\n",
      "110950        21\n",
      "98950         21\n",
      "90700         19\n",
      "75095         13\n",
      "102000        11\n",
      "184400        10\n",
      "89100          9\n",
      "43700          8\n",
      "109000         6\n",
      "91250          5\n",
      "32995          3\n",
      "845000         1\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "Legislative District  - valores unicos =  49 \n",
      " Legislative District\n",
      "41.0    12297\n",
      "45.0    11372\n",
      "48.0    10449\n",
      "11.0     8419\n",
      "1.0      8329\n",
      "5.0      8182\n",
      "36.0     7885\n",
      "46.0     7291\n",
      "43.0     6883\n",
      "37.0     5574\n",
      "34.0     5537\n",
      "18.0     5129\n",
      "44.0     5084\n",
      "22.0     4747\n",
      "21.0     4708\n",
      "32.0     4693\n",
      "23.0     4107\n",
      "40.0     4040\n",
      "26.0     3837\n",
      "33.0     3560\n",
      "47.0     3494\n",
      "31.0     3372\n",
      "10.0     3260\n",
      "17.0     3230\n",
      "39.0     2768\n",
      "35.0     2690\n",
      "27.0     2689\n",
      "42.0     2681\n",
      "49.0     2671\n",
      "24.0     2572\n",
      "28.0     2457\n",
      "30.0     2289\n",
      "2.0      2215\n",
      "25.0     2014\n",
      "8.0      1994\n",
      "38.0     1955\n",
      "6.0      1838\n",
      "12.0     1785\n",
      "20.0     1774\n",
      "4.0      1658\n",
      "13.0     1365\n",
      "29.0     1315\n",
      "14.0     1250\n",
      "19.0     1142\n",
      "9.0      1087\n",
      "16.0      972\n",
      "3.0       927\n",
      "7.0       914\n",
      "15.0      492\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "DOL Vehicle ID  - valores unicos =  191407 \n",
      " DOL Vehicle ID\n",
      "202233958    1\n",
      "233897744    1\n",
      "227407638    1\n",
      "266774651    1\n",
      "217991805    1\n",
      "            ..\n",
      "207617693    1\n",
      "214734796    1\n",
      "152631531    1\n",
      "260113955    1\n",
      "233761440    1\n",
      "Name: count, Length: 191407, dtype: int64 \n",
      "\n",
      "Vehicle Location  - valores unicos =  891 \n",
      " Vehicle Location\n",
      "POINT (-122.1207376 47.6705374)    4858\n",
      "POINT (-122.206146 47.839957)      3585\n",
      "POINT (-122.271716 47.452837)      3240\n",
      "POINT (-122.1925969 47.676241)     3228\n",
      "POINT (-122.144149 47.560742)      3051\n",
      "                                   ... \n",
      "POINT (-117.1627736 33.725296)        1\n",
      "POINT (-104.8367434 39.3603485)       1\n",
      "POINT (-121.3847971 39.1203191)       1\n",
      "POINT (-121.2925231 46.0184108)       1\n",
      "POINT (-122.600874 45.51465)          1\n",
      "Name: count, Length: 891, dtype: int64 \n",
      "\n",
      "Electric Utility  - valores unicos =  75 \n",
      " Electric Utility\n",
      "PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)                                                                 70546\n",
      "PUGET SOUND ENERGY INC                                                                                        38778\n",
      "CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)                                                                  33567\n",
      "BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF CLARK COUNTY - (WA)                                              11067\n",
      "BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||PENINSULA LIGHT COMPANY                                8446\n",
      "                                                                                                              ...  \n",
      "BONNEVILLE POWER ADMINISTRATION||CITY OF TACOMA - (WA)||ALDER MUTUAL LIGHT CO, INC|PENINSULA LIGHT COMPANY        2\n",
      "CITY OF SEATTLE - (WA)                                                                                            2\n",
      "BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF CLALLAM COUNTY|PUD NO 1 OF JEFFERSON COUNTY                          1\n",
      "BONNEVILLE POWER ADMINISTRATION||PENINSULA LIGHT COMPANY                                                          1\n",
      "BONNEVILLE POWER ADMINISTRATION||PUD NO 1 OF JEFFERSON COUNTY                                                     1\n",
      "Name: count, Length: 75, dtype: int64 \n",
      "\n",
      "2020 Census Tract  - valores unicos =  2137 \n",
      " 2020 Census Tract\n",
      "5.303303e+10    2693\n",
      "5.303303e+10    1074\n",
      "5.303303e+10     867\n",
      "5.303301e+10     755\n",
      "5.306701e+10     711\n",
      "                ... \n",
      "3.609106e+10       1\n",
      "5.181004e+10       1\n",
      "1.800300e+10       1\n",
      "4.105100e+10       1\n",
      "4.105100e+10       1\n",
      "Name: count, Length: 2137, dtype: int64 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "colunas = df.columns\n",
    "for i, coluna in enumerate(colunas):\n",
    "    print(coluna,\" - valores unicos = \",df[coluna].nunique(),\"\\n\" , df[coluna].value_counts(),\"\\n\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6bc7a911",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:37.620543Z",
     "iopub.status.busy": "2024-07-19T18:33:37.620143Z",
     "iopub.status.idle": "2024-07-19T18:33:37.660090Z",
     "shell.execute_reply": "2024-07-19T18:33:37.658892Z"
    },
    "papermill": {
     "duration": 0.048912,
     "end_time": "2024-07-19T18:33:37.662968",
     "exception": false,
     "start_time": "2024-07-19T18:33:37.614056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "frequencia_valores = df['State'].value_counts()\n",
    "\n",
    "# Identificar o valor com a maior frequência\n",
    "valor_maior_frequencia = frequencia_valores.idxmax()\n",
    "\n",
    "# Filtrar o DataFrame para excluir o valor com a maior frequência\n",
    "df_filtrado = df[df['State'] != valor_maior_frequencia]\n",
    "\n",
    "contagem = df_filtrado['State'].value_counts()\n",
    "ordem_decrescente = contagem.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "aafd59e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-19T18:33:37.674009Z",
     "iopub.status.busy": "2024-07-19T18:33:37.673649Z",
     "iopub.status.idle": "2024-07-19T18:33:38.594175Z",
     "shell.execute_reply": "2024-07-19T18:33:38.592940Z"
    },
    "papermill": {
     "duration": 0.928734,
     "end_time": "2024-07-19T18:33:38.596460",
     "exception": false,
     "start_time": "2024-07-19T18:33:37.667726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1134116670.py:24: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  label= f\"WA: {frequencia_valores[0]}\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f2cb74766e0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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89Ps888//8jBwUEmk0nHjx9PtT8qKkouLi4ymUyqU6eOVc/hbpcvX9bcuXM1YMAANWzYUPny5ZPJZLJ4EHh6EhMTNW3aND322GPy8vJSvnz5VK1aNY0ePVo3btzIcGxUVJT69++vwMBAubq6ytfXV126dNHOnTszHLdt2zY988wz8vPzk4uLi4oVK6YXX3xRBw4cyHDcwYMH1bNnT5UoUUIuLi7y9fXV008/rc2bN6c7ZsGCBerevbtq1KihokWLytnZWd7e3qpfv77Gjh2ruLi4DI/5sORo4b59+3bVqlVLtWrVkiQNHjxYtWrV0vDhwyVJQ4YM0YABA9SnTx/Vq1dPcXFxWr16tdzc3MwxFixYoIoVK6ply5Z68skn1bhxY82aNStHzgcAAABABkxOUszsO3+OmW23V92DgoJUokQJGYahjRs3ptnnt99+M/95w4YNafbZsGGDDMNQiRIlFBQUlGr/vHnzdPv2bUnSzp07tXv37uwnn4Y//vhDvXr10pdffqktW7bct+BOkZCQoLZt26pfv34KDw9X7dq11apVK128eFHDhw833wGdliNHjqh69eqaOnWqHBwcFBoaqlKlSmnp0qVq0KCBVqxYkea4WbNmqVGjRlq2bJkKFSqkDh06qHDhwlqwYIFq166t1atXpznup59+Up06dfTNN9/I2dlZTz31lEqXLq2VK1fq8ccf1+zZs9McN336dM2fP1+JiYmqXbu2unTporp162rfvn16//33VatWLZ0/fz5T75ct5Wjh3qxZMxmGkeo1d+5cSZLJZNKHH36oyMhI3bx5U+vWrVP58uUtYhQqVEgLFy7UtWvXFBMTo//85z/Knz9/DpwNAAAAgAwlX5euLb/z52vL7mzbqebNm0uyLNDvtmHDBhUpUkTFixfPsHC/O9a9/vOf/0iSihUrJknpFpfZ5evrq759+2rmzJn6+++/NWPGjEyNGzZsmNatW6dixYpp+/bt2rBhg3788UcdO3ZM7dq10+7du9WvX79U4wzDUNeuXXXx4kW99NJLOnLkiL777jv99ddfmjlzphITE9W9e/dUK4Ht2bNH//rXv5SUlKTPP/9cBw4c0NKlS7V792795z//UUJCgrp27apLly5ZjIuKitILL7ygGzduaNCgQTp69KiWLVumbdu26eeff5azs7Nee+01HTx4MFWuEyZM0KVLl7R//36tXr1aCxcuVFhYmM6cOaPGjRvr2LFjeuuttx7g3bYNu53jDgAAAOARYtyWYhdLxv8X68Z1Kfa7O+12KKPC/cyZMzpx4oSaNm2qpk2b6vjx42kuMZ0yNq3C/c8//9ShQ4dUsGBBcwG/YMECJSRYf6m84OBgzZgxQ3369FHdunUztcLW7du3NX36dEnSmDFjVLVqVfM+T09Pff3113J3d9eiRYt07Ngxi7G//PKLdu3apQIFCmjatGlydHQ07+vTp49atmypuLg4TZo0yWLc1KlTlZSUpKZNm2rQoEEW+3r16qVOnTopJiYm1bj//Oc/unbtmsqWLavx48dbHK9Nmzb617/+pcTERH388cepzrNBgwYqVKhQqnYfHx9z/19//TXD9+phoHAHAAAAkD2ZWpfdQYr+yrIpepYyVZLkwLrvKcX2wYMHU610lXIlvVmzZmratKlFW4qoqCjzFd60Cvevv/5aktStWzc98cQTKlu2rK5cuZLuLeQP28GDB83zu9OaC+/n56eqVavKMAwtW7bMYl/KOXTo0CHNu6FfeOEFSdLy5cst2v/+++90j3d3+9KlS9Mc17RpUzk5pZ5+kTLuhx9+UGJi5p+rkBLLHpYSp3AHAAAAkD0OrnceNJd8U4rsL0XUTv06ESTd3Go57uZW6UTZtPtHDbgTz0i8E/8hK1WqlAIDAyWlLspTtlOuuEupr8yn9AkMDFSpUqUs9l27dk1LliyRJL388ssymUzq1auXpP/dPp+WZs2ayWQyaeTIkVk5pQdy90PZfHx80uxTuHBhSbJY5UuSdu3aJUmqW7dumuNS2o8ePar4+PhUx7zf8Q4fPpylcdeuXdORI0fS7HOva9eumd/nDh06ZGqMLVG4AwAAAMg+k9Odl+9kybODlLBHStj1v9ftU2mPu33Ssl/Cnjvji076X8wckt7t8inz26tUqaLy5cvLz88v3eI+ravtixcvVnx8vGrWrGl+UHePHj3k6OiosLAwnTqVznv1EBUtWtT85xMnTqTZJ6U9IiLCoj1lu2TJkmmOK1GihKQ7c+FPnjyZ6pj3O15Wx6WVa4pff/1VPXv2VPfu3RUSEqJixYrp119/VZs2bTRu3Lg0xzxMFO4AAAAArMPkJJkcJJ/hUqlNknPpBxvvXFoq9eed8SaHHH/qfFqF++nTp3XixAk1adJEJpNJ0p0r7xERERYFd0bz21MeQte7d29zW7FixRQSEqLk5GTNmTMnzXxKliypChUqmK8g21LZsmXNhfdXX32Vav+GDRt0+PBhSVJsbKzFvmvXrkmSPDw80ox99+3zd49t0aKFpDtz/a9ft3xw4e3bty3uRkhr3KpVq9J8AvzMmTPTHHe3AwcO6JtvvtG3336rX3/9VdeuXdMLL7yguXPnytvbO80xDxOFOwAAAADrMjlIbnWkwL2S1/OZG+P1ghS4T3KrfWe8HUgpuo8cOaILFy5IsrxNPsW989wjIyPNRe29hfu+ffu0bds2ubq6qlu3bhb7Xn75ZUnS3LlzlZycnCqfefPm6dChQ+rfv382zyxzRowYIUmaMmWKhg8frlOnTunq1ataunSpnnvuOTk7O0uSHBys8/Pq16+fChcurAsXLigkJER///234uPjtXv3brVv397iKvvdx3zhhRdUrlw53bhxQ61bt9aGDRsUFxenQ4cOqXv37tqwYYN5vnp6uQ4cOFCGYejWrVs6duyYJkyYoF9++UWVK1fW77//bpXzyw77+BsBAAAA4NFicpZMHlLAQsnRN+O+jr5SwALJlO/OODtRrFgxlStXTtL/rqDf/WC6FPcW7in/LVeunHmptxQpV9tDQ0NVsGBBi30pa5afOnVKYWFh1jyVLHn55Zc1atQomUwmjR49WqVLl1ahQoXUpUsXFS1aVO+8844kpXoqu6enpyRZzEO/293z5728vMx/9vX11apVq1SsWDFt2rRJ9evXV/78+VWzZk398ccf5qfc33tMNzc3/fzzz6pcubL279+v5s2by9PTU5UqVdKiRYs0YcIEFShQIM1c7+Xs7KygoCANHjxYv/zyi65evaoXX3xRN27cyMQ7Zjs5e+8JAAAAgEeXySQZt6SkKxn3S756p5/J5eHk9QCaN2+uo0eP6rffftMLL7ygDRs2yMfHx2J5tMqVK6tIkSLm4j692+Rv3bql+fPnS7rzJPTGjRunOl5SUpKkOwX+E088YZNzehDDhw/Xiy++qOXLl+v48eNycXHRY489ps6dO5sf3latWjWLMaVLl9aVK1d0+vTpNGOmLJ1nMplSPbivfv36Onr0qFasWKG///5bN27cUFBQkLp27Wounj08PFSmTBmLcWXLltXu3bv13//+V5s3b1ZMTIxKliypZ555RqVKldKQIUPSzDUj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ihUrys3NTdWqVUt1J4O1Y+aGHAEAAHB/3CoP2LFnn31Wzz77bLr703pYWrNmzbRr166HFvP777/XggULtHDhQlWpUkXh4eEaOHCgAgIC1KNHj3SPk55ly5ZZNZ4tcpSkv//+W0lJSebtffv26YknnlCXLl3S7L9582Y9//zzGjt2rNq3b6+FCxcqNDRUO3fuVNWqVW0SMzfkCAAAgPujcAeQLe+88475irYkVatWTadOndLYsWPTLYozeuDdv//9b6vGc3d3t3qO7u7u5of9pfjkk08UFBSkpk2bphlv0qRJatOmjd555x1J0ujRo7V27Vp9+eWXmjFjhiSpSJEiVo1p7Xi2yBEAAAD3x63yALLl+vXrqZaSc3R0VHJycrpjgoODFRYWZtGW8sA7a8ezRY73unXrlubPn6+XX35ZJpMpzXgPOmfe2jFzQ44AAABIG4U7gGx56qmn9NFHH2nVqlU6efKkVqxYoc8//1ydOnUy93mQB95ZO54tcrzXypUrFR0drZ49e6b7PqU3Zz4yMjLN/taOac85njt3Ti+++KJ8fHzk7u6uatWqafv27enGlKQNGzaodu3acnV1VdmyZVNN8bBFTAAAgJzCrfIAsmXKlCkaNmyY/vWvf+nixYsKCAhQ3759NXz4cHOf9B54N2jQIE2aNEnFixc3P/CuYcOGVo1nixzvNXv2bLVt21YBAQHWeVNtENNec7x69aoaNWqk5s2b65dfflGRIkV09OhRFSxYMN0xERERateunV577TUtWLBAYWFheuWVV+Tv76+QkBCbxAQAAMhJFO4AssXT01MTJ07UxIkT0+3zIA+8s3Y8W8VMcerUKa1bt07Lly/PsF96c+b9/PxsHtOecxw3bpxKlCihOXPmmPcHBgZmGHPGjBkKDAzUhAkTJEmVKlXSpk2b9MUXXygkJMQmMQEAAHISt8oDQDbMmTNHRYsWVbt27TLs9yBz5q0d055z/PHHH1W3bl116dJFRYsWVa1atfTVV19lGPN+8+ZtERMAACAnUbgDQBYlJydrzpw56tGjh5ycLG9g6t69u4YOHWrefvPNN7V69WpNmDBBhw4d0siRI7V9+3b179/fpjHtPccTJ05o+vTpKleunNasWaPXX39db7zxhr755pt03/f05s3Hxsbqxo0bNok5cuTIVGvXV6xYMd14EuvXAwAA66FwB4As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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "ax = sns.countplot(x='State',order=ordem_decrescente, data=df_filtrado, palette='viridis')\n",
    "\n",
    "# Adicionar rótulos de contagem nas barras\n",
    "for p in ax.patches:\n",
    "    ax.annotate(f'{p.get_height()}', \n",
    "                (p.get_x() + p.get_width() / 2., \n",
    "                 p.get_height()), \n",
    "                ha='center', \n",
    "                va='center', \n",
    "                xytext=(0, 10), \n",
    "                textcoords='offset points')\n",
    "\n",
    "plt.title('Contagem de Valores na State')\n",
    "plt.xlabel('States')\n",
    "plt.ylabel('Contagem')\n",
    "plt.xticks(rotation=45)\n",
    "handles = [plt.Line2D(xdata=[1], \n",
    "                      ydata=[1], \n",
    "                      marker='*', \n",
    "                      color='w', \n",
    "                      markerfacecolor='gold', \n",
    "                      markersize=18, \n",
    "                      label= f\"WA: {frequencia_valores[0]}\"\n",
    "                      )\n",
    "          ]\n",
    "\n",
    "plt.legend(handles=handles, \n",
    "           loc='upper right', \n",
    "           title='Maior valor',\n",
    "           fontsize=16, \n",
    "           title_fontsize=18, \n",
    "           shadow=True)\n",
    "\n",
    "#plt.legend(loc='upper right', fontsize=14, bbox_to_anchor=(1.15, 1.05), title='Legenda', title_fontsize='13', shadow=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bd6561b",
   "metadata": {
    "papermill": {
     "duration": 0.005841,
     "end_time": "2024-07-19T18:33:38.608216",
     "exception": false,
     "start_time": "2024-07-19T18:33:38.602375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5405844,
     "sourceId": 8977796,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.16612,
   "end_time": "2024-07-19T18:33:39.236035",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-19T18:33:30.069915",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
